#!/bin/bash

startdir=$(pwd -L)
cd $(dirname $(readlink "$0" || echo $0))
basedir=$(git rev-parse --show-toplevel)
cd $basedir

declare destination=${HOME}
declare dryrun=false

_usage() {
  cat <<EOF
Usage: $0 [OPTIONS] CMD

Command for managing dotfiles.

OPTIONS:
  -h	Show this message.
  -d	Set the destination directory.
  -n    Dry run.

CMD:
  link		Links all files that don't exist in the destination [default].
  existing	List existing files that are not already symlinked.
EOF
}

_basedir() {
  echo ${basedir}
}

_existing() {
  while read; do
    declare dstpath=${destination}/${REPLY}
    declare srcpath=$(pwd -L)/${REPLY}
    if [ ! "$dstpath" -ef "$srcpath" ]; then
      echo $dstpath
    fi
  done < <(git ls-files | grep -v .gitignore | grep -v .gitmodules | grep -v "^README")
}

_unlink_subdirs() {
  while read; do
    declare subdir=$(dirname ${REPLY})
    cd ${subdir}
    _unlink $(basename ${subdir})
    cd ${basedir}
  done < <(find ${basedir} -mindepth 2 -maxdepth 2 -name .git)
}

_absdir() {
    (
    cd $(dirname $1)         # or  cd ${1%/*}
    echo $PWD/$(basename $1) # or  echo $PWD/${1##*/}
    )
}

_add() {
    (
    pushd $startdir >/dev/null
  if [[ $# -lt 2 ]]; then
    echo "usage: add <filename>"
    return
  fi
  declare relpath=$(_absdir $(readlink "$2" || echo "$2"))
  if [[ $relpath != ${HOME}* ]]; then 
      echo "$relpath doesn't start with $HOME"
      return
  fi
  if [[ $relpath == ${basedir}* ]]; then
      echo "$relpath already in $basedir"
      return
    fi
  declare relpath=${relpath#${HOME}}
  declare fn=$(basename $2)
  declare dst="${basedir}${relpath}"
  echo "mkdir -p $(dirname ${dst})"
  mkdir -p $(dirname ${dst})
  echo "mv ${HOME}${relpath} ${dst}"
  mv ${HOME}${relpath} ${dst}
    popd >/dev/null
  echo "git add ${dst}"
  git add ${dst}
  echo "git commit -m 'add $relpath to dotfiles'"
  git commit -m 'add $relpath to dotfiles'
    _link
  )
}

_unlink() {
  declare pfx=$1
  while read; do
    declare dstpath=$(echo ${destination}/${pfx}/${REPLY} | sed s#//*#/#g)
    if [ -e $dstpath ]; then
      echo -n "Unlinking ${dstpath}... "
      if ! $dryrun; then
        unlink "${dstpath}"
        echo "done."
      else
        echo "dryrun."
      fi
    fi
  done < <(git ls-files | grep -v .gitignore | grep -v .gitmodules | grep -v "^README")
}

_link_subdirs() {
  while read; do
    declare subdir=$(dirname ${REPLY})
    cd ${subdir}
    _link $(basename ${subdir})
    cd ${basedir}
  done < <(find ${basedir} -mindepth 2 -maxdepth 2 -name .git)
}

_link() {
  declare pfx=$1
  while read; do
    declare dstpath=$(echo ${destination}/${pfx}/${REPLY} | sed s#//*#/#g)
    declare srcpath=$(pwd -L)/${REPLY}
    declare dstdir=$(dirname ${dstpath})
    if [ ! -e $dstdir ]; then
      echo -n "Creating directory ${dstdir}... "
      if ! $dryrun; then
        mkdir -p ${dstdir}
        echo "done."
      else
        echo "dryrun."
      fi
    fi
    if [ ! -e $dstpath ]; then
      echo -n "Linking ${dstpath} to ${srcpath}... "
      if ! $dryrun; then
        ln -s "${srcpath}" "${dstpath}"
        echo "done."
      else
        echo "dryrun."
      fi
    elif [ ! -L $dstpath ]; then
      echo "${dstpath} already exists and is not a link."
    fi
  done < <(git ls-files | grep -v .gitignore | grep -v .gitmodules | grep -v "^README")
}

while getopts "hnd:" OPTION; do
  case $OPTION in
    h)
      _usage
      exit 1
      ;;
    n)
      dryrun=true
      ;;
    d)
      destination=$OPTARG
      ;;
  esac
done

shift $((OPTIND-1))

cmd=$1

case $cmd in
  basedir|cd)
    _basedir
    ;;
  add|a)
    _add $@
    ;;
  existing|e)
    _existing
    ;;
  unlink|u)
    _unlink
    _unlink_subdirs
    ;;
  link|l|*)
    _link
    _link_subdirs
    cd ${basedir}
    ;;
esac
